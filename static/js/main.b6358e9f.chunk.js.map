{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Filter.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedTodoId","onSelect","className","map","id","completed","title","userId","classNames","type","onClick","TodoFilter","setfilteredBy","setQuery","query","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filter","TodoModal","selectedTodo","onClose","useState","user","setUser","useEffect","href","email","name","App","setTodos","isLoading","setIsLoading","setSelectedTodo","filteredBy","setFilteredBy","filteredTodos","ALL","filter","todo","ACTIVE","COMPLETED","toLowerCase","includes","finally","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6358e9f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId?: number;\n  onSelect?: (todo: Todo | null) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todos, selectedTodoId, onSelect = () => {} }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({\n          id,\n          completed,\n          title,\n          userId,\n        }) => (\n          <tr data-cy=\"todo\" className=\"\" key={id}>\n            <td className=\"is-vcentered\">{id}</td>\n            {completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-success': completed },\n                { 'has-text-danger': !completed },\n              )}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodoId === id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelect(null)}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelect({\n                    id,\n                    completed,\n                    title,\n                    userId,\n                  })}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n);\n","type Props = {\n  query: string;\n  setfilteredBy: (filteredBy: string) => void;\n  setQuery: (title: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  setfilteredBy,\n  setQuery,\n  query,\n}) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setfilteredBy(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"button\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo,\n  onClose?: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose = () => {},\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo.userId) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, [selectedTodo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filter } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [filteredBy, setFilteredBy] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const filteredByFilter = (filteredBy === Filter.ALL)\n    ? todos\n    : todos.filter(todo => {\n      switch (filteredBy) {\n        case Filter.ACTIVE:\n          return !todo.completed;\n\n        case Filter.COMPLETED:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n\n  const filteredTodos = filteredByFilter.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setfilteredBy={setFilteredBy}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!isLoading && todos.length > 0 && (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoId={selectedTodo?.id}\n                  onSelect={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}